
Employee[] list = new Employee[5];

list[0] = new Employee("Sam" , 6000);
list[1] = new Manager("Ricky" , 100, 1000000);
list[2] = new Employee();
list[3]= new Manager();
list[4] = new Employee("Ned" , 6000000);

for( int i = 0; i< list.length; i++){
    System.out.println(list[i]);
}

for( int i = 0; i< list.length; i++){
   list[i].display();
   if(list[i] instanceof Manager){
   }
}

Types of inhertiance

Single inheritance 

Multi level inheritance 

Heirachical Inheritance or hybrid.  supported by c++
////////////////////////////////////////////////////////////////

Abstraction hides the implementation from the user. 
Abstraction is achieved by using abstract classes and interfaces.
user gets funcionality. 
Abstract classes and methods 
the keyword is abstract 
abstract class A{ }
an Abstract method is a method without implementation.

public void abc():

Abstract classes cannot be instantiated or cannot created objects. 
if we inherit an abstract class we must provide implementation. 
////////////////////////////////////CODINZG ABSTRACT CLASAS //////////////
abstract public class Bike{
    abstract void brake();
    

}

NEW CLASS 

public class SportsBike extends Bike{
    public void brake(){
        System.out.println("SportsBike is slowing down!");
    
    }

}

NEW CLASS 

public class MountianBike extends Bike{
    public void brake(){
        System.out.println("The Mountain bike is slowing down!");
    }

}

TESTER CLASS 

public class AbstractionTester {
    public static void main(String[] args){
        //Bike b1 = new bike // THIS cannot happen because the class is abstract. 
        SportsBike s1 = new SportsBike();
        MountainBike m1 = new MountainBike(): 
        s1.brake();
        m1.brake();
    
    }

}

Defining an interface type.

Declare a type for the object.

public interface InterfaceName 
there method accessors are automatically public by defualt.
The interface type has no constructor. 
the interface has no instance variables or constructors. NO implementation. 

Use keyword implements

public class BankAccount implements Measurable{
    public double getMeasure(){
        return area;
    
    }

}

////////////
Using interface for callbacks 

The code that makes the call to the callback receives an object of class the implements this interface.

The average method simply makes a callaback to the measure method whenever it needs to measure any object.
The average method will ask the AreaMeasurer object to measure the rectangles .
public class MockObjects {
	private ArrayList<Double>scores;
	
	public MockObjects() {scores = new ArrayList<Double>();}public void 
	
	addScore(int studentid, double score ) {
		
		//Ignore Student id
		scores.add(score);
		
	}
	public double getAverageScore(int studentid) {
		
		double total =0;
		for(double x: scores) (total = total+ x) return total/
				scores.size();
		
	}
	public void save(String filename) {
		//Do nothing.
		
	}

}


